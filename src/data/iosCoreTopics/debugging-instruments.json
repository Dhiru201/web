{
  "id": "debugging-instruments",
  "title": "Debugging and Instruments in iOS",
  "sections": [
    {
      "title": "Introduction",
      "content": "Debugging and Instruments are essential tools for iOS developers to identify and fix issues in their applications. This guide covers various debugging techniques, Instruments tools, and best practices for optimizing app performance and memory usage."
    },
    {
      "title": "Basic Debugging",
      "content": "Common debugging techniques in Xcode:\n\n```swift\n// Breakpoints\nfunc processData() {\n    let data = [1, 2, 3, 4, 5]\n    var sum = 0\n    \n    // Add breakpoint here to inspect values\n    for number in data {\n        sum += number\n    }\n    \n    print(\"Sum: \\(sum)\")\n}\n\n// Debugging with print statements\nfunc debugWithPrint() {\n    print(\"Debug point 1\")\n    let value = calculateValue()\n    print(\"Calculated value: \\(value)\")\n    print(\"Debug point 2\")\n}\n\n// Using assertions\nfunc validateInput(_ input: String) {\n    assert(!input.isEmpty, \"Input cannot be empty\")\n    // Process input\n}\n\n// Using fatalError for unrecoverable errors\nfunc loadCriticalData() -> Data {\n    guard let data = try? Data(contentsOf: criticalURL) else {\n        fatalError(\"Failed to load critical data\")\n    }\n    return data\n}\n```"
    },
    {
      "title": "LLDB Commands",
      "content": "Using LLDB debugger commands:\n\n```swift\nclass DebugExample {\n    func debugWithLLDB() {\n        let numbers = [1, 2, 3, 4, 5]\n        var sum = 0\n        \n        // LLDB commands in comments\n        // po numbers - Print object description\n        // p sum - Print primitive value\n        // bt - Print backtrace\n        // frame variable - List variables in current frame\n        // expression sum = 0 - Modify variable value\n        \n        for number in numbers {\n            sum += number\n        }\n        \n        print(\"Sum: \\(sum)\")\n    }\n    \n    func debugComplexObject() {\n        let user = User(id: \"1\", name: \"John\", email: \"john@example.com\")\n        \n        // LLDB commands for complex objects\n        // po user - Print object description\n        // po user.name - Print specific property\n        // expression user.name = \"Jane\" - Modify property\n        // frame variable -L - List local variables with types\n    }\n}\n```"
    },
    {
      "title": "Memory Debugging",
      "content": "Identifying and fixing memory issues:\n\n```swift\nclass MemoryDebugExample {\n    // Enable Zombie Objects in scheme settings\n    func debugZombieObjects() {\n        var object: AnyObject? = NSObject()\n        object = nil\n        // Accessing object here will trigger zombie object detection\n    }\n    \n    // Using Address Sanitizer\n    func debugMemoryIssues() {\n        var buffer = [Int](repeating: 0, count: 10)\n        // Enable Address Sanitizer in scheme settings\n        // buffer[10] = 1 // This will trigger Address Sanitizer\n    }\n    \n    // Debugging retain cycles\n    class RetainCycleExample {\n        var closure: (() -> Void)?\n        \n        func setupClosure() {\n            // This creates a retain cycle\n            closure = { [weak self] in\n                self?.doSomething()\n            }\n        }\n        \n        func doSomething() {}\n    }\n}\n```"
    },
    {
      "title": "Instruments Tools",
      "content": "Using various Instruments tools:\n\n```swift\nclass InstrumentsExample {\n    // Time Profiler example\n    func timeProfilerTest() {\n        // Run Time Profiler to analyze this method\n        var result = 0\n        for i in 0..<1000000 {\n            result += i * i\n        }\n        print(result)\n    }\n    \n    // Allocations example\n    func allocationsTest() {\n        // Run Allocations instrument to track memory allocations\n        var objects = [NSObject]()\n        for _ in 0..<1000 {\n            objects.append(NSObject())\n        }\n    }\n    \n    // Leaks example\n    func leaksTest() {\n        // Run Leaks instrument to detect memory leaks\n        var retainedObjects = [NSObject]()\n        let object = NSObject()\n        retainedObjects.append(object)\n        // Forget to remove object from array\n    }\n}\n```"
    },
    {
      "title": "Network Debugging",
      "content": "Debugging network requests and responses:\n\n```swift\nclass NetworkDebugExample {\n    func debugNetworkRequest() {\n        let url = URL(string: \"https://api.example.com/data\")!\n        let request = URLRequest(url: url)\n        \n        // Print request details\n        print(\"Request URL: \\(request.url?.absoluteString ?? \"\")\")\n        print(\"Request Method: \\(request.httpMethod ?? \"\")\")\n        print(\"Request Headers: \\(request.allHTTPHeaderFields ?? [:])\")\n        \n        URLSession.shared.dataTask(with: request) { data, response, error in\n            // Print response details\n            if let httpResponse = response as? HTTPURLResponse {\n                print(\"Status Code: \\(httpResponse.statusCode)\")\n                print(\"Response Headers: \\(httpResponse.allHeaderFields)\")\n            }\n            \n            if let data = data {\n                print(\"Response Data: \\(String(data: data, encoding: .utf8) ?? \"\")\")\n            }\n            \n            if let error = error {\n                print(\"Error: \\(error)\")\n            }\n        }.resume()\n    }\n}\n```"
    },
    {
      "title": "Best Practices",
      "content": "Follow these best practices when debugging:\n\n1. Use appropriate debugging tools\n2. Implement proper logging\n3. Handle errors gracefully\n4. Use breakpoints effectively\n5. Monitor memory usage\n6. Profile performance regularly\n\nExample of comprehensive debugging setup:\n\n```swift\nclass DebugManager {\n    static let shared = DebugManager()\n    private init() {}\n    \n    // Log levels\n    enum LogLevel: String {\n        case debug = \"DEBUG\"\n        case info = \"INFO\"\n        case warning = \"WARNING\"\n        case error = \"ERROR\"\n    }\n    \n    // Logging function\n    func log(_ message: String, level: LogLevel = .debug, file: String = #file, function: String = #function, line: Int = #line) {\n        #if DEBUG\n        let fileName = (file as NSString).lastPathComponent\n        print(\"[\\\\(level.rawValue)] [\\\\(fileName):\\\\(line)] \\\\(function) - \\\\(message)\")\n        #endif\n    }\n    \n    // Performance measurement\n    func measureTime<T>(_ operation: () -> T) -> T {\n        let startTime = CFAbsoluteTimeGetCurrent()\n        let result = operation()\n        let endTime = CFAbsoluteTimeGetCurrent()\n        log(\"Operation took \\\\(endTime - startTime) seconds\", level: .info)\n        return result\n    }\n}\n```"
    },
    {
      "title": "Common Use Cases",
      "content": "Here are some common debugging scenarios:\n\n1. Performance Profiling\n```swift\nclass PerformanceExample {\n    func profilePerformance() {\n        // Use Time Profiler in Instruments\n        let startTime = CFAbsoluteTimeGetCurrent()\n        \n        // Heavy operation\n        var result = 0\n        for i in 0..<1000000 {\n            result += complexCalculation(i)\n        }\n        \n        let endTime = CFAbsoluteTimeGetCurrent()\n        print(\"Operation took \\\\(endTime - startTime) seconds\")\n    }\n    \n    private func complexCalculation(_ input: Int) -> Int {\n        // Simulate complex calculation\n        return input * input\n    }\n}\n```\n\n2. Memory Leak Detection\n```swift\nclass MemoryLeakExample {\n    class LeakyObject {\n        var closure: (() -> Void)?\n        \n        init() {\n            // This creates a retain cycle\n            closure = { [weak self] in\n                self?.doSomething()\n            }\n        }\n        \n        func doSomething() {}\n    }\n    \n    func detectLeaks() {\n        // Use Leaks instrument in Instruments\n        var object: LeakyObject? = LeakyObject()\n        object = nil // Object should be deallocated\n    }\n}\n```\n\n3. Network Debugging\n```swift\nclass NetworkDebugExample {\n    func debugNetworkCalls() {\n        // Use Network instrument in Instruments\n        let url = URL(string: \"https://api.example.com/data\")!\n        \n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                print(\"Network error: \\\\(error)\")\n                return\n            }\n            \n            if let httpResponse = response as? HTTPURLResponse {\n                print(\"Status code: \\\\(httpResponse.statusCode)\")\n            }\n            \n            if let data = data {\n                print(\"Response data: \\\\(String(data: data, encoding: .utf8) ?? \"\")\")\n            }\n        }\n        \n        task.resume()\n    }\n}\n```"
    }
  ]
} 