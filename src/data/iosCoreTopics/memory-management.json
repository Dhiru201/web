{
  "id": "memory-management",
  "title": "Memory Management in iOS",
  "sections": [
    {
      "title": "Introduction",
      "content": "Memory management is a crucial aspect of iOS development that ensures efficient resource utilization and prevents memory leaks. In iOS, memory management is primarily handled through Automatic Reference Counting (ARC), which automatically tracks and manages the memory usage of your app."
    },
    {
      "title": "ARC (Automatic Reference Counting)",
      "content": "ARC is a compiler feature that automatically manages memory by tracking and managing object references. It works by:\n\n1. Keeping track of how many references exist to each object\n2. Automatically releasing objects when their reference count reaches zero\n3. Inserting appropriate retain and release calls at compile time\n\nHere's how ARC works in practice:\n\n```swift\nclass Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n        print(\"\\(name) is being initialized\")\n    }\n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nvar person1: Person?\nvar person2: Person?\nvar person3: Person?\n\nperson1 = Person(name: \"John\") // Reference count: 1\nperson2 = person1 // Reference count: 2\nperson3 = person1 // Reference count: 3\n\nperson1 = nil // Reference count: 2\nperson2 = nil // Reference count: 1\nperson3 = nil // Reference count: 0, object deallocated\n```"
    },
    {
      "title": "Strong and Weak References",
      "content": "Understanding the difference between strong and weak references is crucial for proper memory management:\n\n1. Strong References (default)\n```swift\nclass Person {\n    var apartment: Apartment? // Strong reference\n}\n\nclass Apartment {\n    var tenant: Person? // Strong reference\n}\n```\n\n2. Weak References\n```swift\nclass Person {\n    var apartment: Apartment?\n}\n\nclass Apartment {\n    weak var tenant: Person? // Weak reference\n}\n```\n\nWeak references don't increase the reference count and automatically become nil when the referenced object is deallocated."
    },
    {
      "title": "Retain Cycles",
      "content": "A retain cycle occurs when two or more objects hold strong references to each other, preventing them from being deallocated. Here's how to break retain cycles:\n\n```swift\nclass Person {\n    let name: String\n    var apartment: Apartment?\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    weak var tenant: Person? // Using weak reference to break retain cycle\n    \n    init(unit: String) {\n        self.unit = unit\n    }\n    \n    deinit {\n        print(\"Apartment \\(unit) is being deinitialized\")\n    }\n}\n```"
    },
    {
      "title": "Memory Leaks",
      "content": "Memory leaks occur when objects are no longer needed but aren't deallocated. Common causes include:\n\n1. Retain cycles\n2. Strong reference cycles in closures\n3. Unreleased resources\n\nHere's how to prevent memory leaks in closures:\n\n```swift\nclass ViewController: UIViewController {\n    var data: [String] = []\n    \n    func fetchData() {\n        // Using weak self to prevent retain cycle\n        NetworkManager.shared.fetchData { [weak self] result in\n            guard let self = self else { return }\n            self.data = result\n        }\n    }\n}\n```"
    },
    {
      "title": "Best Practices",
      "content": "Follow these best practices for effective memory management:\n\n1. Use weak references when appropriate\n2. Break retain cycles using weak or unowned references\n3. Be careful with closures capturing self\n4. Use Instruments to detect memory leaks\n5. Implement proper cleanup in deinit\n6. Use autoreleasepool for temporary objects\n\nExample of using autoreleasepool:\n\n```swift\nfor i in 0..<1000 {\n    autoreleasepool {\n        let image = processLargeImage()\n        // image is released at the end of this block\n    }\n}\n```"
    }
  ]
} 