{
  "id": "notifications",
  "title": "Notifications in iOS",
  "sections": [
    {
      "title": "Introduction",
      "content": "Notifications in iOS provide a way to broadcast information throughout your app. There are two main types: Local Notifications and Push Notifications. This guide covers both types and their implementation."
    },
    {
      "title": "Local Notifications",
      "content": "Local notifications are scheduled and delivered by your app locally. Here's how to implement them:\n\n```swift\nimport UserNotifications\n\nclass NotificationManager {\n    static let shared = NotificationManager()\n    \n    func requestAuthorization() {\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            if granted {\n                print(\"Notification authorization granted\")\n            } else if let error = error {\n                print(\"Error: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    func scheduleNotification(title: String, body: String, timeInterval: TimeInterval) {\n        let content = UNMutableNotificationContent()\n        content.title = title\n        content.body = body\n        content.sound = .default\n        \n        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n        \n        UNUserNotificationCenter.current().add(request) { error in\n            if let error = error {\n                print(\"Error scheduling notification: \\(error.localizedDescription)\")\n            }\n        }\n    }\n}\n```"
    },
    {
      "title": "Push Notifications",
      "content": "Push notifications are sent from a server to the user's device. Here's how to handle them:\n\n```swift\nimport UserNotifications\n\nclass AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        UNUserNotificationCenter.current().delegate = self\n        \n        // Register for remote notifications\n        application.registerForRemoteNotifications()\n        \n        return true\n    }\n    \n    // Handle successful registration\n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        let token = deviceToken.map { String(format: \"%02.2hhx\", $0) }.joined()\n        print(\"Device Token: \\(token)\")\n        // Send token to your server\n    }\n    \n    // Handle registration failure\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        print(\"Failed to register: \\(error.localizedDescription)\")\n    }\n    \n    // Handle notification when app is in foreground\n    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        completionHandler([.alert, .sound, .badge])\n    }\n    \n    // Handle notification tap\n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n        let userInfo = response.notification.request.content.userInfo\n        // Handle notification data\n        completionHandler()\n    }\n}\n```"
    },
    {
      "title": "Notification Categories and Actions",
      "content": "You can add interactive actions to notifications:\n\n```swift\nfunc setupNotificationCategories() {\n    let acceptAction = UNNotificationAction(identifier: \"ACCEPT_ACTION\",\n                                          title: \"Accept\",\n                                          options: [.foreground])\n    \n    let declineAction = UNNotificationAction(identifier: \"DECLINE_ACTION\",\n                                           title: \"Decline\",\n                                           options: [.destructive])\n    \n    let meetingInviteCategory = UNNotificationCategory(identifier: \"MEETING_INVITATION\",\n                                                     actions: [acceptAction, declineAction],\n                                                     intentIdentifiers: [],\n                                                     options: .customDismissAction)\n    \n    UNUserNotificationCenter.current().setNotificationCategories([meetingInviteCategory])\n}\n\n// When creating a notification\nlet content = UNMutableNotificationContent()\ncontent.title = \"Meeting Invitation\"\ncontent.body = \"Weekly Team Meeting\"\ncontent.categoryIdentifier = \"MEETING_INVITATION\"\n```"
    },
    {
      "title": "Notification Extensions",
      "content": "You can customize notification appearance and behavior using extensions:\n\n1. Notification Service Extension\n```swift\nclass NotificationService: UNNotificationServiceExtension {\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        let content = request.content.mutableCopy() as! UNMutableNotificationContent\n        \n        // Modify the notification content\n        content.title = \"Modified: \\(content.title)\"\n        \n        contentHandler(content)\n    }\n}\n```\n\n2. Notification Content Extension\n```swift\nclass NotificationViewController: UIViewController, UNNotificationContentExtension {\n    @IBOutlet var label: UILabel?\n    \n    func didReceive(_ notification: UNNotification) {\n        self.label?.text = notification.request.content.body\n    }\n}\n```"
    },
    {
      "title": "Best Practices",
      "content": "Follow these best practices when implementing notifications:\n\n1. Request permission at appropriate times\n2. Provide clear and concise notification content\n3. Handle all notification states (foreground, background, terminated)\n4. Test notifications thoroughly\n5. Implement proper error handling\n6. Consider user preferences\n\nExample of handling user preferences:\n\n```swift\nclass NotificationSettings {\n    static func updateNotificationPreferences() {\n        UNUserNotificationCenter.current().getNotificationSettings { settings in\n            switch settings.authorizationStatus {\n            case .authorized:\n                print(\"Notifications authorized\")\n            case .denied:\n                print(\"Notifications denied\")\n            case .notDetermined:\n                print(\"Notifications not determined\")\n            case .provisional:\n                print(\"Provisional notifications authorized\")\n            @unknown default:\n                print(\"Unknown authorization status\")\n            }\n        }\n    }\n}\n```"
    },
    {
      "title": "Common Use Cases",
      "content": "Here are some common notification use cases:\n\n1. Reminder Notifications\n```swift\nfunc scheduleReminder(title: String, date: Date) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = \"Don't forget!\"\n    \n    let components = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute], from: date)\n    let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)\n    \n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    UNUserNotificationCenter.current().add(request)\n}\n```\n\n2. Background Task Completion\n```swift\nfunc notifyBackgroundTaskCompletion() {\n    let content = UNMutableNotificationContent()\n    content.title = \"Task Completed\"\n    content.body = \"Your background task has finished processing\"\n    \n    let request = UNNotificationRequest(identifier: \"BACKGROUND_TASK\", content: content, trigger: nil)\n    UNUserNotificationCenter.current().add(request)\n}\n```\n\n3. Location-Based Notifications\n```swift\nfunc scheduleLocationNotification() {\n    let content = UNMutableNotificationContent()\n    content.title = \"Welcome!\"\n    content.body = \"You've arrived at your destination\"\n    \n    let region = CLCircularRegion(center: CLLocationCoordinate2D(latitude: 37.3352, longitude: -122.0322),\n                                 radius: 100,\n                                 identifier: \"destination\")\n    region.notifyOnEntry = true\n    \n    let trigger = UNLocationNotificationTrigger(region: region, repeats: false)\n    let request = UNNotificationRequest(identifier: \"LOCATION\", content: content, trigger: trigger)\n    UNUserNotificationCenter.current().add(request)\n}\n```"
    }
  ]
} 