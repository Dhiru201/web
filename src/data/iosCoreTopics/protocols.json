{
  "id": "protocols",
  "title": "Protocols in Swift",
  "sections": [
    {
      "title": "Introduction",
      "content": "Protocols in Swift define a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. They are similar to interfaces in other languages but more powerful and flexible."
    },
    {
      "title": "Basic Protocol Syntax",
      "content": "Here's how to define and conform to a protocol:\n\n```swift\nprotocol Vehicle {\n    var numberOfWheels: Int { get }\n    func startEngine()\n    func stopEngine()\n}\n\nclass Car: Vehicle {\n    let numberOfWheels = 4\n    \n    func startEngine() {\n        print(\"Car engine started\")\n    }\n    \n    func stopEngine() {\n        print(\"Car engine stopped\")\n    }\n}\n```"
    },
    {
      "title": "Protocol Properties",
      "content": "Protocols can require specific properties with getters and/or setters:\n\n```swift\nprotocol FullyNamed {\n    var fullName: String { get }\n}\n\nstruct Person: FullyNamed {\n    var fullName: String\n}\n\nclass Starship: FullyNamed {\n    var prefix: String?\n    var name: String\n    \n    init(name: String, prefix: String? = nil) {\n        self.name = name\n        self.prefix = prefix\n    }\n    \n    var fullName: String {\n        return (prefix != nil ? prefix! + \" \" : \"\") + name\n    }\n}\n```"
    },
    {
      "title": "Protocol Inheritance",
      "content": "Protocols can inherit from other protocols:\n\n```swift\nprotocol Vehicle {\n    var numberOfWheels: Int { get }\n}\n\nprotocol Motorized: Vehicle {\n    var engineSize: Double { get }\n    func startEngine()\n}\n\nclass Motorcycle: Motorized {\n    let numberOfWheels = 2\n    let engineSize = 1000.0\n    \n    func startEngine() {\n        print(\"Motorcycle engine started\")\n    }\n}\n```"
    },
    {
      "title": "Protocol Extensions",
      "content": "Protocol extensions allow you to provide default implementations:\n\n```swift\nprotocol TextRepresentable {\n    var textualDescription: String { get }\n}\n\nextension TextRepresentable {\n    var textualDescription: String {\n        return \"A text representation\"\n    }\n}\n\nstruct Point: TextRepresentable {\n    let x: Int\n    let y: Int\n    \n    // Uses default implementation\n}\n\nstruct Line: TextRepresentable {\n    let start: Point\n    let end: Point\n    \n    var textualDescription: String {\n        return \"Line from \\(start.x),\\(start.y) to \\(end.x),\\(end.y)\"\n    }\n}\n```"
    },
    {
      "title": "Protocol-Oriented Programming",
      "content": "Swift encourages protocol-oriented programming. Here's an example of using protocols for composition:\n\n```swift\nprotocol Flyable {\n    func fly()\n}\n\nprotocol Swimmable {\n    func swim()\n}\n\nstruct Bird: Flyable {\n    func fly() {\n        print(\"Bird is flying\")\n    }\n}\n\nstruct Penguin: Swimmable {\n    func swim() {\n        print(\"Penguin is swimming\")\n    }\n}\n\nstruct Duck: Flyable, Swimmable {\n    func fly() {\n        print(\"Duck is flying\")\n    }\n    \n    func swim() {\n        print(\"Duck is swimming\")\n    }\n}\n```"
    },
    {
      "title": "Common iOS Protocols",
      "content": "Here are some commonly used protocols in iOS development:\n\n1. UITableViewDataSource and UITableViewDelegate\n```swift\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n}\n```\n\n2. Codable\n```swift\nstruct User: Codable {\n    let name: String\n    let age: Int\n}\n\nlet json = \"\"\"\n{\n    \"name\": \"John\",\n    \"age\": 30\n}\n\"\"\".data(using: .utf8)!\n\nlet user = try JSONDecoder().decode(User.self, from: json)\n```\n\n3. Equatable\n```swift\nstruct Point: Equatable {\n    let x: Int\n    let y: Int\n}\n\nlet p1 = Point(x: 1, y: 2)\nlet p2 = Point(x: 1, y: 2)\nprint(p1 == p2) // true\n```"
    }
  ]
} 