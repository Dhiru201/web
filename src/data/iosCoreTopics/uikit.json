{
  "id": "uikit",
  "title": "UIKit in iOS",
  "sections": [
    {
      "title": "Introduction",
      "content": "UIKit is Apple's framework for constructing and managing a graphical, event-driven user interface for iOS applications. It provides the core objects needed to build and manage iOS apps, including windows, views, and controls. This guide covers UIKit fundamentals and advanced concepts."
    },
    {
      "title": "Basic UI Components",
      "content": "Core UIKit components and their usage:\n\n```swift\nimport UIKit\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupUI()\n    }\n    \n    private func setupUI() {\n        // UILabel\n        let label = UILabel()\n        label.text = \"Hello, World!\"\n        label.textColor = .black\n        label.font = .systemFont(ofSize: 16)\n        label.textAlignment = .center\n        \n        // UIButton\n        let button = UIButton(type: .system)\n        button.setTitle(\"Tap Me\", for: .normal)\n        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n        \n        // UITextField\n        let textField = UITextField()\n        textField.placeholder = \"Enter text\"\n        textField.borderStyle = .roundedRect\n        textField.delegate = self\n        \n        // UIImageView\n        let imageView = UIImageView()\n        imageView.image = UIImage(named: \"example\")\n        imageView.contentMode = .scaleAspectFit\n        \n        // UISwitch\n        let switchControl = UISwitch()\n        switchControl.isOn = true\n        switchControl.addTarget(self, action: #selector(switchValueChanged), for: .valueChanged)\n        \n        // UISlider\n        let slider = UISlider()\n        slider.minimumValue = 0\n        slider.maximumValue = 100\n        slider.value = 50\n        slider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        \n        // Add to view\n        view.addSubview(label)\n        view.addSubview(button)\n        view.addSubview(textField)\n        view.addSubview(imageView)\n        view.addSubview(switchControl)\n        view.addSubview(slider)\n        \n        // Set up constraints\n        setupConstraints()\n    }\n    \n    @objc private func buttonTapped() {\n        print(\"Button tapped\")\n    }\n    \n    @objc private func switchValueChanged(_ sender: UISwitch) {\n        print(\"Switch value: \\(sender.isOn)\")\n    }\n    \n    @objc private func sliderValueChanged(_ sender: UISlider) {\n        print(\"Slider value: \\(sender.value)\")\n    }\n}\n\nextension ViewController: UITextFieldDelegate {\n    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n        textField.resignFirstResponder()\n        return true\n    }\n}\n```"
    },
    {
      "title": "Auto Layout",
      "content": "Implementing Auto Layout programmatically:\n\n```swift\nclass ViewController: UIViewController {\n    private func setupConstraints() {\n        // Create views\n        let redView = UIView()\n        redView.backgroundColor = .red\n        view.addSubview(redView)\n        \n        let blueView = UIView()\n        blueView.backgroundColor = .blue\n        view.addSubview(blueView)\n        \n        // Disable autoresizing\n        redView.translatesAutoresizingMaskIntoConstraints = false\n        blueView.translatesAutoresizingMaskIntoConstraints = false\n        \n        // Create constraints\n        NSLayoutConstraint.activate([\n            // Red view constraints\n            redView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),\n            redView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\n            redView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),\n            redView.heightAnchor.constraint(equalToConstant: 100),\n            \n            // Blue view constraints\n            blueView.topAnchor.constraint(equalTo: redView.bottomAnchor, constant: 20),\n            blueView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\n            blueView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),\n            blueView.heightAnchor.constraint(equalTo: redView.heightAnchor)\n        ])\n    }\n}\n\n// Using Visual Format Language\nclass ViewController: UIViewController {\n    private func setupConstraintsWithVFL() {\n        let views = [\"redView\": UIView(), \"blueView\": UIView()]\n        views.values.forEach { view in\n            view.translatesAutoresizingMaskIntoConstraints = false\n            view.backgroundColor = .red\n            self.view.addSubview(view)\n        }\n        \n        let metrics = [\"margin\": 20, \"height\": 100]\n        \n        // Horizontal constraints\n        NSLayoutConstraint.activate(\n            NSLayoutConstraint.constraints(\n                withVisualFormat: \"H:|-margin-[redView]-margin-|\",\n                metrics: metrics,\n                views: views\n            )\n        )\n        \n        // Vertical constraints\n        NSLayoutConstraint.activate(\n            NSLayoutConstraint.constraints(\n                withVisualFormat: \"V:|-margin-[redView(height)]-margin-[blueView(height)]\",\n                metrics: metrics,\n                views: views\n            )\n        )\n    }\n}\n```"
    },
    {
      "title": "Table Views",
      "content": "Implementing UITableView with custom cells:\n\n```swift\nclass TableViewController: UIViewController {\n    private let tableView = UITableView()\n    private let data = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupTableView()\n    }\n    \n    private func setupTableView() {\n        tableView.delegate = self\n        tableView.dataSource = self\n        tableView.register(CustomCell.self, forCellReuseIdentifier: \"CustomCell\")\n        \n        view.addSubview(tableView)\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n}\n\nextension TableViewController: UITableViewDelegate, UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomCell\n        cell.configure(with: data[indexPath.row])\n        return cell\n    }\n    \n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        print(\"Selected: \\(data[indexPath.row])\")\n    }\n}\n\nclass CustomCell: UITableViewCell {\n    private let titleLabel = UILabel()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupUI()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupUI() {\n        contentView.addSubview(titleLabel)\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n    \n    func configure(with title: String) {\n        titleLabel.text = title\n    }\n}\n```"
    },
    {
      "title": "Collection Views",
      "content": "Implementing UICollectionView with custom layouts:\n\n```swift\nclass CollectionViewController: UIViewController {\n    private let collectionView: UICollectionView\n    private let data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.itemSize = CGSize(width: 100, height: 100)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        \n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        super.init(nibName: nil, bundle: nil)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(CustomCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.backgroundColor = .white\n        \n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n}\n\nextension CollectionViewController: UICollectionViewDelegate, UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCell\n        cell.configure(with: data[indexPath.item])\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        print(\"Selected: \\(data[indexPath.item])\")\n    }\n}\n\nclass CustomCell: UICollectionViewCell {\n    private let titleLabel = UILabel()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupUI()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupUI() {\n        contentView.backgroundColor = .lightGray\n        contentView.layer.cornerRadius = 8\n        \n        contentView.addSubview(titleLabel)\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.textAlignment = .center\n        \n        NSLayoutConstraint.activate([\n            titleLabel.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n    \n    func configure(with title: String) {\n        titleLabel.text = title\n    }\n}\n```"
    },
    {
      "title": "Navigation",
      "content": "Implementing navigation in UIKit:\n\n```swift\nclass MainViewController: UIViewController {\n    private let pushButton = UIButton()\n    private let presentButton = UIButton()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupUI()\n    }\n    \n    private func setupUI() {\n        view.backgroundColor = .white\n        \n        pushButton.setTitle(\"Push View Controller\", for: .normal)\n        pushButton.addTarget(self, action: #selector(pushButtonTapped), for: .touchUpInside)\n        \n        presentButton.setTitle(\"Present View Controller\", for: .normal)\n        presentButton.addTarget(self, action: #selector(presentButtonTapped), for: .touchUpInside)\n        \n        let stackView = UIStackView(arrangedSubviews: [pushButton, presentButton])\n        stackView.axis = .vertical\n        stackView.spacing = 20\n        \n        view.addSubview(stackView)\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    @objc private func pushButtonTapped() {\n        let detailVC = DetailViewController()\n        navigationController?.pushViewController(detailVC, animated: true)\n    }\n    \n    @objc private func presentButtonTapped() {\n        let modalVC = ModalViewController()\n        modalVC.modalPresentationStyle = .pageSheet\n        present(modalVC, animated: true)\n    }\n}\n\nclass DetailViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        title = \"Detail\"\n    }\n}\n\nclass ModalViewController: UIViewController {\n    private let dismissButton = UIButton()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupUI()\n    }\n    \n    private func setupUI() {\n        view.backgroundColor = .white\n        \n        dismissButton.setTitle(\"Dismiss\", for: .normal)\n        dismissButton.addTarget(self, action: #selector(dismissButtonTapped), for: .touchUpInside)\n        \n        view.addSubview(dismissButton)\n        dismissButton.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            dismissButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            dismissButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    @objc private func dismissButtonTapped() {\n        dismiss(animated: true)\n    }\n}\n```"
    },
    {
      "title": "Best Practices",
      "content": "Follow these best practices when working with UIKit:\n\n1. Use Auto Layout for responsive layouts\n2. Implement proper memory management\n3. Handle device orientation changes\n4. Support accessibility\n5. Use appropriate view controller lifecycle methods\n6. Implement proper error handling\n\nExample of accessibility implementation:\n\n```swift\nclass AccessibleViewController: UIViewController {\n    private let button = UIButton()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAccessibility()\n    }\n    \n    private func setupAccessibility() {\n        button.setTitle(\"Submit\", for: .normal)\n        button.accessibilityLabel = \"Submit button\"\n        button.accessibilityHint = \"Double tap to submit the form\"\n        button.accessibilityTraits = .button\n        \n        // VoiceOver support\n        view.accessibilityElements = [button]\n        \n        // Dynamic Type support\n        button.titleLabel?.font = .preferredFont(forTextStyle: .body)\n        button.titleLabel?.adjustsFontForContentSizeCategory = true\n        \n        // Dark Mode support\n        if #available(iOS 13.0, *) {\n            button.backgroundColor = .systemBackground\n            button.setTitleColor(.label, for: .normal)\n        }\n    }\n}\n```"
    },
    {
      "title": "Common Use Cases",
      "content": "Here are some common UIKit scenarios:\n\n1. Custom Alert\n```swift\nclass AlertViewController: UIViewController {\n    func showCustomAlert(title: String, message: String) {\n        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        \n        let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n            print(\"OK tapped\")\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel) { _ in\n            print(\"Cancel tapped\")\n        }\n        \n        alert.addAction(okAction)\n        alert.addAction(cancelAction)\n        \n        present(alert, animated: true)\n    }\n}\n```\n\n2. Custom Navigation Bar\n```swift\nclass CustomNavigationController: UINavigationController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupNavigationBar()\n    }\n    \n    private func setupNavigationBar() {\n        // Customize appearance\n        navigationBar.barTintColor = .systemBlue\n        navigationBar.tintColor = .white\n        navigationBar.titleTextAttributes = [\n            .foregroundColor: UIColor.white,\n            .font: UIFont.boldSystemFont(ofSize: 17)\n        ]\n        \n        // Add custom button\n        let customButton = UIBarButtonItem(\n            image: UIImage(systemName: \"gear\"),\n            style: .plain,\n            target: self,\n            action: #selector(customButtonTapped)\n        )\n        \n        topViewController?.navigationItem.rightBarButtonItem = customButton\n    }\n    \n    @objc private func customButtonTapped() {\n        print(\"Custom button tapped\")\n    }\n}\n```\n\n3. Custom Tab Bar\n```swift\nclass CustomTabBarController: UITabBarController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupTabBar()\n    }\n    \n    private func setupTabBar() {\n        // Create view controllers\n        let homeVC = UIViewController()\n        homeVC.view.backgroundColor = .white\n        homeVC.tabBarItem = UITabBarItem(\n            title: \"Home\",\n            image: UIImage(systemName: \"house\"),\n            selectedImage: UIImage(systemName: \"house.fill\")\n        )\n        \n        let profileVC = UIViewController()\n        profileVC.view.backgroundColor = .white\n        profileVC.tabBarItem = UITabBarItem(\n            title: \"Profile\",\n            image: UIImage(systemName: \"person\"),\n            selectedImage: UIImage(systemName: \"person.fill\")\n        )\n        \n        // Set view controllers\n        viewControllers = [homeVC, profileVC]\n        \n        // Customize appearance\n        tabBar.tintColor = .systemBlue\n        tabBar.unselectedItemTintColor = .gray\n    }\n}\n```"
    }
  ]
} 