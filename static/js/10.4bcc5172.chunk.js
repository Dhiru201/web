"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[10],{10:n=>{n.exports=JSON.parse('{"id":"swiftui","title":"SwiftUI in iOS","sections":[{"title":"Introduction","content":"SwiftUI is Apple\'s modern framework for building user interfaces across all Apple platforms. It uses a declarative syntax and provides a unified way to create UIs for iOS, macOS, watchOS, and tvOS. This guide covers SwiftUI fundamentals and advanced concepts."},{"title":"Basic Views","content":"Core SwiftUI views and their usage:\\n\\n```swift\\nstruct ContentView: View {\\n    var body: some View {\\n        VStack {\\n            // Text\\n            Text(\\"Hello, World!\\")\\n                .font(.title)\\n                .foregroundColor(.blue)\\n            \\n            // Image\\n            Image(systemName: \\"star.fill\\")\\n                .foregroundColor(.yellow)\\n                .font(.system(size: 30))\\n            \\n            // Button\\n            Button(action: {\\n                print(\\"Button tapped\\")\\n            }) {\\n                Text(\\"Tap Me\\")\\n                    .padding()\\n                    .background(Color.blue)\\n                    .foregroundColor(.white)\\n                    .cornerRadius(10)\\n            }\\n            \\n            // TextField\\n            TextField(\\"Enter text\\", text: .constant(\\"\\"))\\n                .textFieldStyle(RoundedBorderTextFieldStyle())\\n                .padding()\\n            \\n            // Toggle\\n            Toggle(\\"Enable Feature\\", isOn: .constant(true))\\n                .padding()\\n            \\n            // Slider\\n            Slider(value: .constant(0.5), in: 0...1)\\n                .padding()\\n        }\\n    }\\n}\\n```"},{"title":"Layout and Stacks","content":"Organizing views using stacks and layout modifiers:\\n\\n```swift\\nstruct LayoutView: View {\\n    var body: some View {\\n        // Vertical Stack\\n        VStack(alignment: .leading, spacing: 20) {\\n            Text(\\"Vertical Stack\\")\\n                .font(.headline)\\n            \\n            // Horizontal Stack\\n            HStack(spacing: 10) {\\n                Image(systemName: \\"star.fill\\")\\n                Text(\\"Horizontal Stack\\")\\n            }\\n            \\n            // Z-Stack (overlapping views)\\n            ZStack {\\n                Circle()\\n                    .fill(Color.blue)\\n                    .frame(width: 100, height: 100)\\n                Text(\\"Z-Stack\\")\\n                    .foregroundColor(.white)\\n            }\\n            \\n            // Spacer\\n            HStack {\\n                Text(\\"Left\\")\\n                Spacer()\\n                Text(\\"Right\\")\\n            }\\n            \\n            // Divider\\n            Divider()\\n                .background(Color.gray)\\n            \\n            // Custom Layout\\n            HStack {\\n                Text(\\"Start\\")\\n                Spacer(minLength: 20)\\n                Text(\\"Middle\\")\\n                Spacer(minLength: 20)\\n                Text(\\"End\\")\\n            }\\n        }\\n        .padding()\\n    }\\n}\\n```"},{"title":"State Management","content":"Managing state in SwiftUI:\\n\\n```swift\\nstruct StateView: View {\\n    // @State for view-local state\\n    @State private var count = 0\\n    @State private var isOn = false\\n    @State private var text = \\"\\"\\n    \\n    // @ObservedObject for external state\\n    @ObservedObject var userData: UserData\\n    \\n    // @EnvironmentObject for app-wide state\\n    @EnvironmentObject var settings: AppSettings\\n    \\n    var body: some View {\\n        VStack(spacing: 20) {\\n            // State binding\\n            Text(\\"Count: \\\\(count)\\")\\n            Button(\\"Increment\\") {\\n                count += 1\\n            }\\n            \\n            // Toggle with binding\\n            Toggle(\\"Feature\\", isOn: $isOn)\\n            \\n            // TextField with binding\\n            TextField(\\"Enter text\\", text: $text)\\n                .textFieldStyle(RoundedBorderTextFieldStyle())\\n            \\n            // Observed object\\n            Text(\\"User: \\\\(userData.username)\\")\\n            \\n            // Environment object\\n            Toggle(\\"Dark Mode\\", isOn: $settings.isDarkMode)\\n        }\\n        .padding()\\n    }\\n}\\n\\n// ObservableObject example\\nclass UserData: ObservableObject {\\n    @Published var username = \\"John\\"\\n    @Published var isLoggedIn = false\\n}\\n\\n// EnvironmentObject example\\nclass AppSettings: ObservableObject {\\n    @Published var isDarkMode = false\\n    @Published var fontSize: CGFloat = 16\\n}\\n```"},{"title":"Navigation","content":"Implementing navigation in SwiftUI:\\n\\n```swift\\nstruct NavigationView: View {\\n    @State private var selection: Int? = nil\\n    \\n    var body: some View {\\n        NavigationView {\\n            List {\\n                // NavigationLink\\n                NavigationLink(destination: DetailView(), tag: 1, selection: $selection) {\\n                    Text(\\"Go to Detail\\")\\n                }\\n                \\n                // Programmatic navigation\\n                Button(\\"Navigate Programmatically\\") {\\n                    selection = 1\\n                }\\n                \\n                // Sheet presentation\\n                Button(\\"Show Sheet\\") {\\n                    // Show sheet\\n                }\\n                .sheet(isPresented: .constant(false)) {\\n                    SheetView()\\n                }\\n                \\n                // Alert\\n                Button(\\"Show Alert\\") {\\n                    // Show alert\\n                }\\n                .alert(isPresented: .constant(false)) {\\n                    Alert(title: Text(\\"Alert\\"), message: Text(\\"Message\\"), dismissButton: .default(Text(\\"OK\\")))\\n                }\\n            }\\n            .navigationTitle(\\"Navigation\\")\\n            .navigationBarItems(\\n                leading: Button(\\"Back\\") { },\\n                trailing: Button(\\"Settings\\") { }\\n            )\\n        }\\n    }\\n}\\n\\nstruct DetailView: View {\\n    @Environment(\\\\.presentationMode) var presentationMode\\n    \\n    var body: some View {\\n        VStack {\\n            Text(\\"Detail View\\")\\n            Button(\\"Dismiss\\") {\\n                presentationMode.wrappedValue.dismiss()\\n            }\\n        }\\n    }\\n}\\n\\nstruct SheetView: View {\\n    @Environment(\\\\.presentationMode) var presentationMode\\n    \\n    var body: some View {\\n        NavigationView {\\n            Text(\\"Sheet Content\\")\\n                .navigationBarItems(trailing: Button(\\"Done\\") {\\n                    presentationMode.wrappedValue.dismiss()\\n                })\\n        }\\n    }\\n}\\n```"},{"title":"Custom Views","content":"Creating custom SwiftUI views:\\n\\n```swift\\n// Custom Button Style\\nstruct CustomButtonStyle: ButtonStyle {\\n    func makeBody(configuration: Configuration) -> some View {\\n        configuration.label\\n            .padding()\\n            .background(Color.blue)\\n            .foregroundColor(.white)\\n            .cornerRadius(10)\\n            .scaleEffect(configuration.isPressed ? 0.95 : 1)\\n            .animation(.easeInOut(duration: 0.2))\\n    }\\n}\\n\\n// Custom View Modifier\\nstruct CardModifier: ViewModifier {\\n    func body(content: Content) -> some View {\\n        content\\n            .padding()\\n            .background(Color.white)\\n            .cornerRadius(10)\\n            .shadow(radius: 5)\\n    }\\n}\\n\\n// Custom View\\nstruct CustomCardView: View {\\n    let title: String\\n    let content: String\\n    \\n    var body: some View {\\n        VStack(alignment: .leading) {\\n            Text(title)\\n                .font(.headline)\\n            Text(content)\\n                .font(.body)\\n        }\\n        .modifier(CardModifier())\\n    }\\n}\\n\\n// Usage\\nstruct ContentView: View {\\n    var body: some View {\\n        VStack {\\n            Button(\\"Custom Button\\") {}\\n                .buttonStyle(CustomButtonStyle())\\n            \\n            CustomCardView(title: \\"Title\\", content: \\"Content\\")\\n        }\\n        .padding()\\n    }\\n}\\n```"},{"title":"Best Practices","content":"Follow these best practices when working with SwiftUI:\\n\\n1. Use appropriate state management\\n2. Break down complex views\\n3. Leverage view modifiers\\n4. Implement proper navigation\\n5. Handle device orientation\\n6. Support accessibility\\n\\nExample of accessibility implementation:\\n\\n```swift\\nstruct AccessibleView: View {\\n    var body: some View {\\n        VStack {\\n            Text(\\"Welcome\\")\\n                .accessibilityLabel(\\"Welcome message\\")\\n                .accessibilityAddTraits(.isHeader)\\n            \\n            Button(\\"Continue\\") {}\\n                .accessibilityLabel(\\"Continue button\\")\\n                .accessibilityHint(\\"Double tap to proceed\\")\\n            \\n            Image(systemName: \\"checkmark.circle.fill\\")\\n                .accessibilityLabel(\\"Success indicator\\")\\n                .accessibilityHidden(true)\\n        }\\n    }\\n}\\n```"},{"title":"Common Use Cases","content":"Here are some common SwiftUI scenarios:\\n\\n1. Form Input\\n```swift\\nstruct FormView: View {\\n    @State private var name = \\"\\"\\n    @State private var email = \\"\\"\\n    @State private var age = 18\\n    @State private var isSubscribed = false\\n    \\n    var body: some View {\\n        Form {\\n            Section(header: Text(\\"Personal Information\\")) {\\n                TextField(\\"Name\\", text: $name)\\n                TextField(\\"Email\\", text: $email)\\n                    .keyboardType(.emailAddress)\\n                Stepper(\\"Age: \\\\(age)\\", value: $age, in: 18...100)\\n            }\\n            \\n            Section(header: Text(\\"Preferences\\")) {\\n                Toggle(\\"Subscribe to Newsletter\\", isOn: $isSubscribed)\\n            }\\n            \\n            Section {\\n                Button(\\"Submit\\") {\\n                    // Handle submission\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\n\\n2. List with Search\\n```swift\\nstruct SearchableListView: View {\\n    @State private var searchText = \\"\\"\\n    let items = [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Grape\\"]\\n    \\n    var filteredItems: [String] {\\n        if searchText.isEmpty {\\n            return items\\n        } else {\\n            return items.filter { $0.localizedCaseInsensitiveContains(searchText) }\\n        }\\n    }\\n    \\n    var body: some View {\\n        NavigationView {\\n            List(filteredItems, id: \\\\.self) { item in\\n                Text(item)\\n            }\\n            .searchable(text: $searchText, prompt: \\"Search items\\")\\n            .navigationTitle(\\"Fruits\\")\\n        }\\n    }\\n}\\n```\\n\\n3. Tab View\\n```swift\\nstruct TabContentView: View {\\n    @State private var selectedTab = 0\\n    \\n    var body: some View {\\n        TabView(selection: $selectedTab) {\\n            HomeView()\\n                .tabItem {\\n                    Image(systemName: \\"house\\")\\n                    Text(\\"Home\\")\\n                }\\n                .tag(0)\\n            \\n            ProfileView()\\n                .tabItem {\\n                    Image(systemName: \\"person\\")\\n                    Text(\\"Profile\\")\\n                }\\n                .tag(1)\\n            \\n            SettingsView()\\n                .tabItem {\\n                    Image(systemName: \\"gear\\")\\n                    Text(\\"Settings\\")\\n                }\\n                .tag(2)\\n        }\\n    }\\n}\\n```"}]}')}}]);