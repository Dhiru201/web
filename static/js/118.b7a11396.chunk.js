"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[118],{118:e=>{e.exports=JSON.parse('{"id":"ui-components","title":"UI Components in iOS","sections":[{"title":"Introduction","content":"UIKit provides a rich set of UI components for building iOS applications. This guide covers the most commonly used components, their customization, and best practices for implementation."},{"title":"Basic Components","content":"Common UI components and their basic usage:\\n\\n```swift\\n// UILabel\\nlet label = UILabel()\\nlabel.text = \\"Hello, World!\\"\\nlabel.textColor = .black\\nlabel.font = .systemFont(ofSize: 16)\\nlabel.numberOfLines = 0\\n\\n// UIButton\\nlet button = UIButton(type: .system)\\nbutton.setTitle(\\"Tap Me\\", for: .normal)\\nbutton.setTitleColor(.white, for: .normal)\\nbutton.backgroundColor = .blue\\nbutton.layer.cornerRadius = 8\\nbutton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\\n\\n// UITextField\\nlet textField = UITextField()\\ntextField.placeholder = \\"Enter text\\"\\ntextField.borderStyle = .roundedRect\\ntextField.delegate = self\\n\\n// UIImageView\\nlet imageView = UIImageView()\\nimageView.image = UIImage(named: \\"example\\")\\nimageView.contentMode = .scaleAspectFit\\nimageView.clipsToBounds = true\\n\\n// UISwitch\\nlet switchControl = UISwitch()\\nswitchControl.isOn = true\\nswitchControl.addTarget(self, action: #selector(switchValueChanged), for: .valueChanged)\\n\\n// UISlider\\nlet slider = UISlider()\\nslider.minimumValue = 0\\nslider.maximumValue = 100\\nslider.value = 50\\nslider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\\n```"},{"title":"Container Views","content":"Views that contain and organize other views:\\n\\n```swift\\n// UIView\\nlet containerView = UIView()\\ncontainerView.backgroundColor = .lightGray\\ncontainerView.layer.cornerRadius = 10\\n\\n// UIScrollView\\nlet scrollView = UIScrollView()\\nscrollView.contentSize = CGSize(width: view.frame.width, height: 2000)\\nscrollView.delegate = self\\n\\n// UITableView\\nlet tableView = UITableView()\\ntableView.delegate = self\\ntableView.dataSource = self\\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \\"Cell\\")\\n\\n// UICollectionView\\nlet layout = UICollectionViewFlowLayout()\\nlayout.scrollDirection = .vertical\\nlayout.itemSize = CGSize(width: 100, height: 100)\\n\\nlet collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\\ncollectionView.delegate = self\\ncollectionView.dataSource = self\\ncollectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \\"Cell\\")\\n\\n// UIStackView\\nlet stackView = UIStackView()\\nstackView.axis = .vertical\\nstackView.alignment = .fill\\nstackView.distribution = .fillEqually\\nstackView.spacing = 10\\n\\n// Add arranged subviews\\nstackView.addArrangedSubview(label)\\nstackView.addArrangedSubview(button)\\nstackView.addArrangedSubview(textField)\\n```"},{"title":"Custom Components","content":"Creating custom UI components:\\n\\n```swift\\n// Custom Button\\nclass CustomButton: UIButton {\\n    override init(frame: CGRect) {\\n        super.init(frame: frame)\\n        setupButton()\\n    }\\n    \\n    required init?(coder: NSCoder) {\\n        super.init(coder: coder)\\n        setupButton()\\n    }\\n    \\n    private func setupButton() {\\n        backgroundColor = .systemBlue\\n        setTitleColor(.white, for: .normal)\\n        layer.cornerRadius = 8\\n        titleLabel?.font = .boldSystemFont(ofSize: 16)\\n    }\\n    \\n    override var isHighlighted: Bool {\\n        didSet {\\n            alpha = isHighlighted ? 0.7 : 1.0\\n        }\\n    }\\n}\\n\\n// Custom TextField\\nclass CustomTextField: UITextField {\\n    private let padding = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)\\n    \\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\\n        return bounds.inset(by: padding)\\n    }\\n    \\n    override func placeholderRect(forBounds bounds: CGRect) -> CGRect {\\n        return bounds.inset(by: padding)\\n    }\\n    \\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\\n        return bounds.inset(by: padding)\\n    }\\n}\\n\\n// Custom Progress View\\nclass CustomProgressView: UIView {\\n    private let progressLayer = CAShapeLayer()\\n    private let trackLayer = CAShapeLayer()\\n    \\n    var progress: CGFloat = 0 {\\n        didSet {\\n            updateProgress()\\n        }\\n    }\\n    \\n    override init(frame: CGRect) {\\n        super.init(frame: frame)\\n        setupLayers()\\n    }\\n    \\n    required init?(coder: NSCoder) {\\n        super.init(coder: coder)\\n        setupLayers()\\n    }\\n    \\n    private func setupLayers() {\\n        let circularPath = UIBezierPath(arcCenter: .zero,\\n                                      radius: bounds.width/2,\\n                                      startAngle: 0,\\n                                      endAngle: 2 * .pi,\\n                                      clockwise: true)\\n        \\n        trackLayer.path = circularPath.cgPath\\n        trackLayer.strokeColor = UIColor.lightGray.cgColor\\n        trackLayer.lineWidth = 10\\n        trackLayer.fillColor = UIColor.clear.cgColor\\n        \\n        progressLayer.path = circularPath.cgPath\\n        progressLayer.strokeColor = UIColor.blue.cgColor\\n        progressLayer.lineWidth = 10\\n        progressLayer.fillColor = UIColor.clear.cgColor\\n        progressLayer.lineCap = .round\\n        progressLayer.transform = CATransform3DMakeRotation(-.pi/2, 0, 0, 1)\\n        \\n        layer.addSublayer(trackLayer)\\n        layer.addSublayer(progressLayer)\\n    }\\n    \\n    private func updateProgress() {\\n        progressLayer.strokeEnd = progress\\n    }\\n}\\n```"},{"title":"Auto Layout","content":"Programmatic Auto Layout implementation:\\n\\n```swift\\n// Basic Constraints\\nview.addSubview(label)\\nlabel.translatesAutoresizingMaskIntoConstraints = false\\n\\nNSLayoutConstraint.activate([\\n    label.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),\\n    label.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\\n    label.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20)\\n])\\n\\n// Visual Format Language\\nlet views = [\\"label\\": label, \\"button\\": button]\\nlet metrics = [\\"margin\\": 20, \\"buttonHeight\\": 44]\\n\\nview.addConstraints(NSLayoutConstraint.constraints(\\n    withVisualFormat: \\"H:|-margin-[label]-margin-|\\",\\n    metrics: metrics,\\n    views: views))\\n\\nview.addConstraints(NSLayoutConstraint.constraints(\\n    withVisualFormat: \\"V:|-margin-[label]-margin-[button(buttonHeight)]\\",\\n    metrics: metrics,\\n    views: views))\\n\\n// Stack View Constraints\\nview.addSubview(stackView)\\nstackView.translatesAutoresizingMaskIntoConstraints = false\\n\\nNSLayoutConstraint.activate([\\n    stackView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\\n    stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\\n    stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\\n    stackView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\\n])\\n```"},{"title":"Best Practices","content":"Follow these best practices when working with UI components:\\n\\n1. Use Auto Layout for responsive design\\n2. Implement proper memory management\\n3. Follow Apple\'s Human Interface Guidelines\\n4. Optimize for different screen sizes\\n5. Handle accessibility\\n6. Use appropriate component states\\n\\nExample of accessibility implementation:\\n\\n```swift\\nclass AccessibleButton: UIButton {\\n    override init(frame: CGRect) {\\n        super.init(frame: frame)\\n        setupAccessibility()\\n    }\\n    \\n    required init?(coder: NSCoder) {\\n        super.init(coder: coder)\\n        setupAccessibility()\\n    }\\n    \\n    private func setupAccessibility() {\\n        isAccessibilityElement = true\\n        accessibilityLabel = \\"Submit button\\"\\n        accessibilityHint = \\"Double tap to submit the form\\"\\n        accessibilityTraits = .button\\n    }\\n}\\n```"},{"title":"Common Use Cases","content":"Here are some common UI component scenarios:\\n\\n1. Form Input\\n```swift\\nclass FormViewController: UIViewController {\\n    private let stackView = UIStackView()\\n    private let nameTextField = UITextField()\\n    private let emailTextField = UITextField()\\n    private let submitButton = UIButton()\\n    \\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n        setupForm()\\n    }\\n    \\n    private func setupForm() {\\n        stackView.axis = .vertical\\n        stackView.spacing = 20\\n        \\n        nameTextField.placeholder = \\"Name\\"\\n        emailTextField.placeholder = \\"Email\\"\\n        emailTextField.keyboardType = .emailAddress\\n        \\n        submitButton.setTitle(\\"Submit\\", for: .normal)\\n        submitButton.addTarget(self, action: #selector(submitTapped), for: .touchUpInside)\\n        \\n        stackView.addArrangedSubview(nameTextField)\\n        stackView.addArrangedSubview(emailTextField)\\n        stackView.addArrangedSubview(submitButton)\\n        \\n        view.addSubview(stackView)\\n        setupConstraints()\\n    }\\n}\\n```\\n\\n2. Custom Alert\\n```swift\\nclass CustomAlert: UIView {\\n    private let titleLabel = UILabel()\\n    private let messageLabel = UILabel()\\n    private let button = UIButton()\\n    \\n    init(title: String, message: String) {\\n        super.init(frame: .zero)\\n        setupAlert(title: title, message: message)\\n    }\\n    \\n    required init?(coder: NSCoder) {\\n        fatalError(\\"init(coder:) has not been implemented\\")\\n    }\\n    \\n    private func setupAlert(title: String, message: String) {\\n        backgroundColor = .white\\n        layer.cornerRadius = 10\\n        \\n        titleLabel.text = title\\n        titleLabel.font = .boldSystemFont(ofSize: 18)\\n        \\n        messageLabel.text = message\\n        messageLabel.numberOfLines = 0\\n        \\n        button.setTitle(\\"OK\\", for: .normal)\\n        button.addTarget(self, action: #selector(dismiss), for: .touchUpInside)\\n        \\n        let stackView = UIStackView(arrangedSubviews: [titleLabel, messageLabel, button])\\n        stackView.axis = .vertical\\n        stackView.spacing = 10\\n        \\n        addSubview(stackView)\\n        setupConstraints()\\n    }\\n}\\n```\\n\\n3. Loading Indicator\\n```swift\\nclass LoadingIndicator: UIView {\\n    private let activityIndicator = UIActivityIndicatorView(style: .large)\\n    private let messageLabel = UILabel()\\n    \\n    init(message: String = \\"Loading...\\") {\\n        super.init(frame: .zero)\\n        setupIndicator(message: message)\\n    }\\n    \\n    required init?(coder: NSCoder) {\\n        fatalError(\\"init(coder:) has not been implemented\\")\\n    }\\n    \\n    private func setupIndicator(message: String) {\\n        backgroundColor = UIColor.black.withAlphaComponent(0.5)\\n        \\n        activityIndicator.color = .white\\n        activityIndicator.startAnimating()\\n        \\n        messageLabel.text = message\\n        messageLabel.textColor = .white\\n        \\n        let stackView = UIStackView(arrangedSubviews: [activityIndicator, messageLabel])\\n        stackView.axis = .vertical\\n        stackView.spacing = 10\\n        stackView.alignment = .center\\n        \\n        addSubview(stackView)\\n        setupConstraints()\\n    }\\n}\\n```"}]}')}}]);