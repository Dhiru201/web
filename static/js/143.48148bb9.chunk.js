"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[143],{143:e=>{e.exports=JSON.parse('{"id":"closures","title":"Detail of Closure","sections":[{"title":"Introduction","content":"Closures are self-contained blocks of functionality that can be passed around and used in your code. They are similar to blocks in C and Objective-C and to lambdas in other programming languages.\\n\\nClosures can capture and store references to any constants and variables from the context in which they are defined. This means they can access and modify those variables from within their body, even if the original scope that defined the variables no longer exists."},{"title":"Basic Syntax","content":"The basic syntax of a closure in Swift is elegant and flexible. Here\'s the general form:\\n\\n```swift\\n{ (parameters) -> return type in\\n    statements\\n}\\n```\\n\\nLet\'s look at a simple example:\\n\\n```swift\\nlet greet = { (name: String) -> String in\\n    return \\"Hello, \\\\(name)!\\"\\n}\\nprint(greet(\\"Swift\\")) // Prints: Hello, Swift!\\n```\\n\\nThis example shows how closures can be assigned to variables and called like functions."},{"title":"Closure Expressions","content":"Swift provides several ways to make closure expressions more concise and readable. Here are the key optimizations:\\n\\n1. Inferring type from context\\n2. Implicit returns from single-expression closures\\n3. Shorthand argument names\\n4. Trailing closure syntax\\n\\nLet\'s see these optimizations in action:\\n\\n```swift\\nlet numbers = [1, 2, 3, 4, 5]\\n\\n// Original closure\\nlet doubled = numbers.map({ (number: Int) -> Int in\\n    return number * 2\\n})\\n\\n// Optimized closure\\nlet doubledOptimized = numbers.map { $0 * 2 }\\n```\\n\\nThe optimized version is much more concise while maintaining readability."},{"title":"Capturing Values","content":"One of the most powerful features of closures is their ability to capture and store references to variables and constants from the surrounding context. This means they can access and modify those variables even if the original scope no longer exists.\\n\\nHere\'s a practical example:\\n\\n```swift\\nfunc makeIncrementer(forIncrement amount: Int) -> () -> Int {\\n    var runningTotal = 0\\n    func incrementer() -> Int {\\n        runningTotal += amount\\n        return runningTotal\\n    }\\n    return incrementer\\n}\\n\\nlet incrementByTen = makeIncrementer(forIncrement: 10)\\nprint(incrementByTen()) // Returns 10\\nprint(incrementByTen()) // Returns 20\\nprint(incrementByTen()) // Returns 30\\n```\\n\\nThis example demonstrates how closures can maintain state between calls."},{"title":"Escaping Closures","content":"A closure is said to escape a function when it\'s passed as an argument to the function but is called after the function returns. This is common in asynchronous operations.\\n\\nHere\'s how to handle escaping closures:\\n\\n```swift\\nvar completionHandlers: [() -> Void] = []\\n\\nfunc someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {\\n    completionHandlers.append(completionHandler)\\n}\\n\\nfunc someFunctionWithNonescapingClosure(closure: () -> Void) {\\n    closure()\\n}\\n```\\n\\nThe `@escaping` keyword is crucial for memory management and preventing retain cycles."},{"title":"Autoclosures","content":"An autoclosure is a closure that\'s automatically created to wrap an expression passed as an argument to a function. It\'s particularly useful for deferring evaluation.\\n\\nHere\'s a practical example:\\n\\n```swift\\nvar customersInLine = [\\"Chris\\", \\"Alex\\", \\"Ewa\\", \\"Barry\\", \\"Daniella\\"]\\n\\nfunc serve(customer customerProvider: @autoclosure () -> String) {\\n    print(\\"Now serving \\\\(customerProvider())!\\")\\n}\\n\\nserve(customer: customersInLine.remove(at: 0))\\n```\\n\\nAutoclosures help make code more readable and efficient."},{"title":"Common Use Cases","content":"Closures are used extensively in iOS development. Here are some of the most common patterns:\\n\\n1. Completion Handlers\\n```swift\\nfunc fetchData(completion: @escaping (Result<Data, Error>) -> Void) {\\n    // Network request\\n    completion(.success(data))\\n}\\n```\\n\\n2. Sorting and Filtering\\n```swift\\nlet names = [\\"Chris\\", \\"Alex\\", \\"Ewa\\", \\"Barry\\", \\"Daniella\\"]\\nlet sortedNames = names.sorted { $0 > $1 }\\n```\\n\\n3. Animation\\n```swift\\nUIView.animate(withDuration: 0.3) {\\n    view.alpha = 0\\n}\\n```\\n\\n4. Event Handling\\n```swift\\nbutton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\\n```\\n\\nThese patterns demonstrate the versatility and power of closures in iOS development."}]}')}}]);