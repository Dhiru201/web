"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[363],{363:e=>{e.exports=JSON.parse('{"id":"delegation","title":"Delegation Pattern in iOS","sections":[{"title":"Introduction","content":"Delegation is a design pattern that enables a class or structure to hand off (or delegate) some of its responsibilities to an instance of another type. It\'s a fundamental pattern in iOS development, used extensively in UIKit and other frameworks."},{"title":"Basic Delegation Pattern","content":"Here\'s how to implement the delegation pattern:\\n\\n```swift\\nprotocol TaskDelegate: AnyObject {\\n    func taskDidStart(_ task: Task)\\n    func taskDidComplete(_ task: Task, withError error: Error?)\\n}\\n\\nclass Task {\\n    weak var delegate: TaskDelegate?\\n    \\n    func start() {\\n        delegate?.taskDidStart(self)\\n        // Perform task\\n        delegate?.taskDidComplete(self, withError: nil)\\n    }\\n}\\n\\nclass TaskManager: TaskDelegate {\\n    func taskDidStart(_ task: Task) {\\n        print(\\"Task started\\")\\n    }\\n    \\n    func taskDidComplete(_ task: Task, withError error: Error?) {\\n        print(\\"Task completed\\")\\n    }\\n}\\n```"},{"title":"UIKit Delegation","content":"Delegation is commonly used in UIKit. Here\'s an example with UITableView:\\n\\n```swift\\nclass ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\\n    @IBOutlet weak var tableView: UITableView!\\n    \\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n        tableView.delegate = self\\n        tableView.dataSource = self\\n    }\\n    \\n    // UITableViewDataSource methods\\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\\n        return items.count\\n    }\\n    \\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\\n        let cell = tableView.dequeueReusableCell(withIdentifier: \\"Cell\\", for: indexPath)\\n        cell.textLabel?.text = items[indexPath.row]\\n        return cell\\n    }\\n    \\n    // UITableViewDelegate methods\\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\\n        print(\\"Selected item: \\\\(items[indexPath.row])\\")\\n    }\\n}\\n```"},{"title":"Custom Delegation Example","content":"Here\'s a more complex example of custom delegation:\\n\\n```swift\\nprotocol DownloadManagerDelegate: AnyObject {\\n    func downloadManager(_ manager: DownloadManager, didStartDownloading url: URL)\\n    func downloadManager(_ manager: DownloadManager, didUpdateProgress progress: Float)\\n    func downloadManager(_ manager: DownloadManager, didFinishDownloading url: URL, to location: URL)\\n    func downloadManager(_ manager: DownloadManager, didFailWithError error: Error)\\n}\\n\\nclass DownloadManager {\\n    weak var delegate: DownloadManagerDelegate?\\n    \\n    func downloadFile(from url: URL) {\\n        delegate?.downloadManager(self, didStartDownloading: url)\\n        \\n        // Simulate download progress\\n        for progress in stride(from: 0.0, through: 1.0, by: 0.1) {\\n            delegate?.downloadManager(self, didUpdateProgress: progress)\\n        }\\n        \\n        delegate?.downloadManager(self, didFinishDownloading: url, to: URL(fileURLWithPath: \\"/path/to/file\\"))\\n    }\\n}\\n\\nclass DownloadViewController: UIViewController, DownloadManagerDelegate {\\n    let downloadManager = DownloadManager()\\n    \\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n        downloadManager.delegate = self\\n    }\\n    \\n    func downloadManager(_ manager: DownloadManager, didStartDownloading url: URL) {\\n        print(\\"Started downloading: \\\\(url)\\")\\n    }\\n    \\n    func downloadManager(_ manager: DownloadManager, didUpdateProgress progress: Float) {\\n        print(\\"Progress: \\\\(progress * 100)%\\")\\n    }\\n    \\n    func downloadManager(_ manager: DownloadManager, didFinishDownloading url: URL, to location: URL) {\\n        print(\\"Download completed: \\\\(url)\\")\\n    }\\n    \\n    func downloadManager(_ manager: DownloadManager, didFailWithError error: Error) {\\n        print(\\"Download failed: \\\\(error)\\")\\n    }\\n}\\n```"},{"title":"Best Practices","content":"When implementing delegation, follow these best practices:\\n\\n1. Always use weak references for delegates to prevent retain cycles\\n2. Make delegate protocols class-only when appropriate\\n3. Use descriptive method names that include the sender\\n4. Consider using optional methods when appropriate\\n5. Document the delegate protocol thoroughly\\n\\nExample of optional methods:\\n\\n```swift\\n@objc protocol CustomViewDelegate: AnyObject {\\n    @objc optional func customViewDidTap(_ view: CustomView)\\n    @objc optional func customView(_ view: CustomView, didUpdateValue value: Int)\\n}\\n\\nclass CustomView: UIView {\\n    weak var delegate: CustomViewDelegate?\\n    \\n    func handleTap() {\\n        delegate?.customViewDidTap?(self)\\n    }\\n    \\n    func updateValue(_ value: Int) {\\n        delegate?.customView?(self, didUpdateValue: value)\\n    }\\n}\\n```"},{"title":"Common iOS Delegation Patterns","content":"Here are some common delegation patterns in iOS:\\n\\n1. View Controller Communication\\n```swift\\nprotocol AddItemDelegate: AnyObject {\\n    func addItemViewController(_ controller: AddItemViewController, didAddItem item: Item)\\n}\\n\\nclass AddItemViewController: UIViewController {\\n    weak var delegate: AddItemDelegate?\\n    \\n    @IBAction func saveButtonTapped(_ sender: UIButton) {\\n        let item = Item(name: \\"New Item\\")\\n        delegate?.addItemViewController(self, didAddItem: item)\\n        dismiss(animated: true)\\n    }\\n}\\n```\\n\\n2. Custom Control Delegation\\n```swift\\nprotocol RatingControlDelegate: AnyObject {\\n    func ratingControl(_ control: RatingControl, didSelectRating rating: Int)\\n}\\n\\nclass RatingControl: UIView {\\n    weak var delegate: RatingControlDelegate?\\n    \\n    func handleRatingSelection(_ rating: Int) {\\n        delegate?.ratingControl(self, didSelectRating: rating)\\n    }\\n}\\n```\\n\\n3. Network Request Delegation\\n```swift\\nprotocol NetworkRequestDelegate: AnyObject {\\n    func networkRequest(_ request: NetworkRequest, didReceiveData data: Data)\\n    func networkRequest(_ request: NetworkRequest, didFailWithError error: Error)\\n}\\n\\nclass NetworkRequest {\\n    weak var delegate: NetworkRequestDelegate?\\n    \\n    func start() {\\n        // Perform network request\\n        delegate?.networkRequest(self, didReceiveData: Data())\\n    }\\n}\\n```"}]}')}}]);